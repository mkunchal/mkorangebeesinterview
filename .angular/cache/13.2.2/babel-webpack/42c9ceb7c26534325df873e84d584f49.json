{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../framework/services/api/api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../framework/services/alerts/alerts.service\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/slide-toggle\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/material/progress-bar\";\n\nfunction InputComponent_small_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 17);\n    i0.ɵɵtext(1, \"Email address is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction InputComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 17);\n    i0.ɵɵtext(1, \"Input valid Email Address\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction InputComponent_mat_option_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const emailId_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", emailId_r5.rawValue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(emailId_r5.userValue);\n  }\n}\n\nfunction InputComponent_small_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 17);\n    i0.ɵɵtext(1, \"Description is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction InputComponent_mat_progress_bar_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-bar\", 19);\n  }\n}\n\nexport let InputComponent = /*#__PURE__*/(() => {\n  class InputComponent {\n    constructor(formBuilder, apiService, router, alerts) {\n      this.formBuilder = formBuilder;\n      this.apiService = apiService;\n      this.router = router;\n      this.alerts = alerts;\n      this.emailIds = [{\n        rawValue: 0,\n        userValue: '0'\n      }, {\n        rawValue: 1,\n        userValue: '1'\n      }, {\n        rawValue: 2,\n        userValue: '2'\n      }, {\n        rawValue: 3,\n        userValue: '3'\n      }, {\n        rawValue: 4,\n        userValue: '4'\n      }];\n      this.emailIdControl = new FormControl('', Validators.required);\n      this.descriptionAlertValidate = false;\n      this.emailAlertValidate = false;\n      this.invalidEmailValidate = false;\n      this.isLoading = false;\n      this.inputGroup = this.formBuilder.group({\n        emailAddress: ['', Validators.email],\n        isPrimary: [false],\n        emailTypeId: this.emailIdControl,\n        description: ['', Validators.required]\n      });\n    }\n\n    ngAfterViewInit() {\n      this.inputGroup.valueChanges.subscribe(value => {\n        this.setDangerValues();\n      });\n    } // - MARK - Built this method due to a bug in Typescript where passing this through an *ngIf for the danger values caused there to be the possibility of null. This provides good accuracy for the error text on the form. \n\n\n    setDangerValues() {\n      if (this.inputGroup.contains('emailAddress') && this.inputGroup.contains('description')) {\n        var emailAddressInput = this.inputGroup.get('emailAddress');\n        var descriptionInput = this.inputGroup.get('description'); // For Email Address Errors\n\n        if (emailAddressInput.errors) {\n          var emailErrors = emailAddressInput.errors;\n\n          if (emailErrors.required) {\n            this.emailAlertValidate = true;\n          } else {\n            this.emailAlertValidate = false;\n          }\n\n          if (emailErrors.email) {\n            this.invalidEmailValidate = true;\n          } else {\n            this.invalidEmailValidate = false;\n          }\n        } else {\n          this.invalidEmailValidate = false;\n          this.emailAlertValidate = false;\n        } // For Description Erros\n\n\n        if (descriptionInput.errors) {\n          var descriptionErrors = descriptionInput.errors;\n\n          if (descriptionErrors.required) {\n            this.descriptionAlertValidate = true;\n          } else {\n            this.descriptionAlertValidate = false;\n          }\n        } else {\n          this.descriptionAlertValidate = false;\n        }\n      }\n    } // - MARK - Form Action checking for valid form input first, then saves the form data as an Interface with the timeCreated variable. Then saved through the Global API service. The error will get called which displays alert and redirects back to the display component.\n\n\n    inputData() {\n      if (this.inputGroup.valid) {\n        const inputValue = this.inputGroup.value;\n        inputValue.timeCreated = Date.now();\n        this.isLoading = true;\n        this.apiService.addMember(inputValue).subscribe(member => {\n          console.log('Saved Properly');\n          console.log(member);\n          this.isLoading = false;\n        }, error => {\n          this.alerts.displayAlert('Invalid API, here is Dummy Member Data');\n          this.isLoading = false;\n          this.router.navigate(['']);\n        }, () => {// Will Not get called since this is when a request is complete.\n        });\n      } else {\n        // This is to display validators just in case.\n        this.inputGroup.markAsTouched();\n      }\n    }\n\n  }\n\n  InputComponent.ɵfac = function InputComponent_Factory(t) {\n    return new (t || InputComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.AlertsService));\n  };\n\n  InputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InputComponent,\n    selectors: [[\"app-input\"]],\n    decls: 37,\n    vars: 7,\n    consts: [[1, \"container\"], [1, \"row\", \"align-items-center\", \"form-row\"], [1, \"col-lg-12\", \"mat-elevation-z8\", \"input-column\"], [\"ngNativeValidate\", \"\", 1, \"input-container\", 3, \"formGroup\"], [1, \"col-md-6\"], [1, \"row\"], [1, \"col-md-8\"], [1, \"full-width\"], [\"matNativeControl\", \"\", \"placeholder\", \"Enter Email Address\", \"formControlName\", \"emailAddress\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formControlName\", \"emailTypeId\", \"color\", \"primary\"], [3, \"formControl\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-md-9\"], [\"matNativeControl\", \"\", \"placeholder\", \"Description\", \"formControlName\", \"description\", 1, \"description-field\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"submit-button\", 3, \"click\"], [\"mode\", \"indeterminate\", 4, \"ngIf\"], [1, \"text-danger\"], [3, \"value\"], [\"mode\", \"indeterminate\"]],\n    template: function InputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"form\", 3);\n        i0.ɵɵelementStart(4, \"mat-card\", 4);\n        i0.ɵɵelementStart(5, \"mat-card-header\");\n        i0.ɵɵelementStart(6, \"mat-card-title\");\n        i0.ɵɵtext(7, \"Input Information\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-card-content\");\n        i0.ɵɵelementStart(9, \"div\", 5);\n        i0.ɵɵelementStart(10, \"div\", 6);\n        i0.ɵɵelementStart(11, \"mat-form-field\", 7);\n        i0.ɵɵelement(12, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, InputComponent_small_13_Template, 2, 0, \"small\", 9);\n        i0.ɵɵtemplate(14, InputComponent_small_14_Template, 2, 0, \"small\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 5);\n        i0.ɵɵelementStart(16, \"div\", 4);\n        i0.ɵɵelementStart(17, \"mat-slide-toggle\", 10);\n        i0.ɵɵtext(18, \"Primary Email Address?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 5);\n        i0.ɵɵelementStart(20, \"div\", 4);\n        i0.ɵɵelementStart(21, \"mat-form-field\", 7);\n        i0.ɵɵelementStart(22, \"mat-label\");\n        i0.ɵɵtext(23, \"Email Type ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-select\", 11);\n        i0.ɵɵelementStart(25, \"mat-option\");\n        i0.ɵɵtext(26, \"Choose Email ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, InputComponent_mat_option_27_Template, 2, 2, \"mat-option\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 5);\n        i0.ɵɵelementStart(29, \"div\", 13);\n        i0.ɵɵelementStart(30, \"mat-form-field\", 7);\n        i0.ɵɵelement(31, \"textarea\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(32, InputComponent_small_32_Template, 2, 0, \"small\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"mat-card-actions\");\n        i0.ɵɵelementStart(34, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function InputComponent_Template_button_click_34_listener() {\n          return ctx.inputData();\n        });\n        i0.ɵɵtext(35, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(36, InputComponent_mat_progress_bar_36_Template, 1, 0, \"mat-progress-bar\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.inputGroup);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailAlertValidate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.invalidEmailValidate);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"formControl\", ctx.emailIdControl);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.emailIds);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.descriptionAlertValidate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      }\n    },\n    directives: [i1.NgControlStatusGroup, i1.FormGroupDirective, i5.MatCard, i5.MatCardHeader, i5.MatCardTitle, i5.MatCardContent, i6.MatFormField, i7.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i8.NgIf, i9.MatSlideToggle, i6.MatLabel, i10.MatSelect, i1.FormControlDirective, i11.MatOption, i8.NgForOf, i5.MatCardActions, i12.MatButton, i13.MatProgressBar],\n    styles: [\".input-column[_ngcontent-%COMP%]{min-height:400px;display:grid}.input-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;margin-top:32px;margin-bottom:32px}.form-row[_ngcontent-%COMP%]{margin-top:15%}mat-card-content[_ngcontent-%COMP%]{margin:8px}.description-field[_ngcontent-%COMP%]{min-height:100px}.full-width[_ngcontent-%COMP%]{width:100%}mat-card-actions[_ngcontent-%COMP%]{text-align:center}.submit-button[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return InputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}