{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\nimport { Globals } from '../../../globals';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http; // - MARK - Fake API Url Here\n\n      this.apiMain = 'https://fakeApi.com';\n      this.apiMemberRoute = '/Members/Email';\n    } // - MARK - The GET Members which returns the number of items and a list of IMember. Typically you could sort in custom ways with API and also only return a certain amount of items per page... This timeout is default set to 1000 since it is an invalid API.\n\n\n    getMembers(page, sort) {\n      const url = `${this.apiMain}${this.apiMemberRoute}/&page=${page}&sort=${sort}`;\n      console.log('On Get Member Service!');\n      return this.http.get(url).pipe(timeout(1000), catchError(err => {\n        console.error('Handling error locally and rethrowing it...', err);\n        return throwError(err);\n      }));\n    } // - MARK - The POST Members, displayed a HttpHeaders since you always will need one with POST. There is also a timeout on the POST.\n\n\n    addMember(member) {\n      const url = `${this.apiMain}${this.apiMemberRoute}`;\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: 'my-auth-token'\n        })\n      };\n      console.log('On Add Member Service!');\n      return this.http.post(url, member, httpOptions).pipe(timeout(1000), catchError(err => {\n        console.error('Handling error locally and rethrowing it...', err);\n        return throwError(err);\n      }));\n    } // - MARK - Use this after faking the GET Api Request in the Component after the error is thrown upon subscribing.\n\n\n    readJson() {\n      return Globals.fakeData.members;\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}